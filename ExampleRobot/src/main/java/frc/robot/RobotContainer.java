// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final FlyWheel m_flyWheel = new FlyWheel();
    public final IntakeSubsystem m_intakeSubsystem = new IntakeSubsystem();
    public final TurretSubsystem m_turretSubsystem = new TurretSubsystem();
    public final HopperSubsystem m_hopperSubsystem = new HopperSubsystem();

// Joysticks
private final XboxController operator = new XboxController(1);
private final XboxController driver = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems
    SmartDashboard.putData(m_turretSubsystem);
    SmartDashboard.putData(m_hopperSubsystem);


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("RunHopper: forward", new RunHopper(false, m_hopperSubsystem));
    SmartDashboard.putData("RunHopper: backward", new RunHopper(true, m_hopperSubsystem));
    SmartDashboard.putData("RunIndexer: forward", new RunIndexer(false, m_hopperSubsystem));
    SmartDashboard.putData("RunIndexer: backward", new RunIndexer(true, m_hopperSubsystem));
    SmartDashboard.putData("SetHood: zero", new SetHood(0, m_turretSubsystem));
    SmartDashboard.putData("SetHood: middle", new SetHood(45, m_turretSubsystem));
    SmartDashboard.putData("SetHood: full", new SetHood(90, m_turretSubsystem));
    SmartDashboard.putData("SetIntake: closed", new SetIntake(false, m_intakeSubsystem));
    SmartDashboard.putData("SetIntake: open", new SetIntake(true, m_intakeSubsystem));
    SmartDashboard.putData("SetFlyWheel: Stop", new SetFlyWheel(0, m_flyWheel));
    SmartDashboard.putData("SetFlyWheel: Forward", new SetFlyWheel(0.1, m_flyWheel));
    SmartDashboard.putData("RunTransferWheel", new RunTransferWheel( m_flyWheel ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
        // _BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_intakeSubsystem.setDefaultCommand(new ManualIntake( driver, m_intakeSubsystem ) );
    m_turretSubsystem.setDefaultCommand(new ManualHood( operator, m_turretSubsystem ) );
    m_flyWheel.setDefaultCommand(new ManualFlyWheel(operator, m_flyWheel));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton runFlyWheel = new JoystickButton(operator, XboxController.Button.kX.value);        
runFlyWheel.whileHeld(new RunTransferWheel( m_flyWheel ) ,true);
    SmartDashboard.putData("Run Fly Wheel",new RunTransferWheel( m_flyWheel ) );

final JoystickButton intakeUp = new JoystickButton(operator, XboxController.Button.kB.value);        
intakeUp.whenPressed(new SetIntake(false, m_intakeSubsystem) ,true);
    SmartDashboard.putData("Intake Up",new SetIntake(false, m_intakeSubsystem) );

final JoystickButton intakeDown = new JoystickButton(operator, XboxController.Button.kA.value);        
intakeDown.whenPressed(new SetIntake(true, m_intakeSubsystem) ,true);
    SmartDashboard.putData("Intake Down",new SetIntake(true, m_intakeSubsystem) );

final JoystickButton indexerBackwards = new JoystickButton(driver, XboxController.Button.kY.value);        
indexerBackwards.whileHeld(new RunIndexer(true, m_hopperSubsystem) ,true);
    SmartDashboard.putData("Indexer Backwards",new RunIndexer(true, m_hopperSubsystem) );

final JoystickButton indexerForward = new JoystickButton(driver, XboxController.Button.kX.value);        
indexerForward.whileHeld(new RunIndexer(false, m_hopperSubsystem) ,true);
    SmartDashboard.putData("Indexer Forward",new RunIndexer(false, m_hopperSubsystem) );

final JoystickButton hopperBackward = new JoystickButton(driver, XboxController.Button.kB.value);        
hopperBackward.whileHeld(new RunHopper(true, m_hopperSubsystem) ,true);
    SmartDashboard.putData("Hopper Backward",new RunHopper(true, m_hopperSubsystem) );

final JoystickButton hopperForward = new JoystickButton(driver, XboxController.Button.kA.value);        
hopperForward.whileHeld(new RunHopper(false, m_hopperSubsystem) ,true);
    SmartDashboard.putData("Hopper Forward",new RunHopper(false, m_hopperSubsystem) );



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public XboxController getDriver() {
      return driver;
    }

public XboxController getOperator() {
      return operator;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

